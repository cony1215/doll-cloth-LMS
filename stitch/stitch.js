// === ÈáùÊ≥ïÊ®°ÂºèÂÆöÁæ© ===
const stitchModes = {
  "Âπ≥ÈáùÁ∏´": {
    name: "Âπ≥ÈáùÁ∏´",
    validate: validateRunningStitch,
    goalCount: 5
  },
  "ÂõûÈáùÁ∏´": {
    name: "ÂõûÈáùÁ∏´",
    validate: validateBackStitch,
    goalCount: 10
  },
  "ËóèÈáùÁ∏´": {
    name: "ËóèÈáùÁ∏´",
    validate: validateHiddenStitch,
    goalCount: 10
  }
};

// === Áï∂ÂâçÊ®°Âºè ===
let selectedMode = localStorage.getItem('stitchMode') || "Âπ≥ÈáùÁ∏´";
let currentStitchMode = stitchModes[selectedMode];

// === ÂàùÂßãÁãÄÊÖã ===
let currentHole = null;
let currentDirection = null;
let directionPopup = null;
let stitchHistory = [];

document.addEventListener("DOMContentLoaded", () => {
  const title = document.getElementById("stitchTitle");
  if (title) {
    title.textContent = "ÁõÆÊ®ôÔºö" + currentStitchMode.name;
  }
});

const holes = document.querySelectorAll('.hole');

holes.forEach(hole => {
  hole.addEventListener('click', (event) => {
    showDirectionOptions(event.target);
  });
});

function showDirectionOptions(target) {
  if (directionPopup) directionPopup.remove();

  directionPopup = document.createElement('div');
  directionPopup.className = 'direction-popup';
  directionPopup.innerHTML = `
    <button onclick="handleStitch('${target.dataset.pos}', 'Ââç')">Ââç</button>
    <button onclick="handleStitch('${target.dataset.pos}', 'Âæå')">Âæå</button>
  `;

  document.body.appendChild(directionPopup);

  const rect = target.getBoundingClientRect();
  directionPopup.style.position = 'absolute';
  directionPopup.style.left = `${rect.right + 10}px`;
  directionPopup.style.top = `${rect.top}px`;
}

function handleStitch(pos, direction) {
  const newHole = [...holes].find(h => h.dataset.pos === pos);

  if (currentHole && newHole === currentHole) {
    alert("‰∏çËÉΩÈÅ∏ÊìáÂêå‰∏ÄÂÄãÊ¥ûÔºÅ");
    removePopup();
    return;
  }

  if (currentDirection && currentDirection === direction) {
    alert("ÈÄô‰∏ÄÈáùÁöÑÊñπÂêëÈúÄËàá‰∏ä‰∏ÄÈáùÁõ∏ÂèçÔºÅ");
    removePopup();
    return;
  }

  // === ÈáùÊ≥ïË¶èÂâáÈ©óË≠â ===
	if (stitchHistory.length > 0 && !currentStitchMode.validate(pos)) {
	  alert("‚ùå ‰∏çÁ¨¶Âêà„Äå" + currentStitchMode.name + "„ÄçË¶èÂâáÔºÅ");
	  removePopup();
	  return;
	}

  newHole.classList.add('selected');

  if (currentHole) {
    drawLineBetween(currentHole, newHole, direction);
    addLog(`‚úÖ Á∏´Á∑öÔºö${currentHole.dataset.pos}ÔºàÂæû${currentDirection}Ôºâ‚Üí ${pos}ÔºàÂæû${direction}Ôºâ`);
  } else {
    addLog(`üî∏ Ëµ∑ÈªûÔºö${pos}ÔºàÂæû${direction}Ôºâ`);
  }

  currentHole = newHole;
  currentDirection = direction;
  stitchHistory.push(pos);

  removePopup();
  checkStitchCompletion();
}

function removePopup() {
  if (directionPopup) {
    directionPopup.remove();
    directionPopup = null;
  }
}

function drawLineBetween(hole1, hole2, direction) {
  const svg = document.getElementById("stitchCanvas");
  const rect1 = hole1.getBoundingClientRect();
  const rect2 = hole2.getBoundingClientRect();

  const x1 = rect1.left + rect1.width / 2;
  const y1 = rect1.top + rect1.height / 2;
  const x2 = rect2.left + rect2.width / 2;
  const y2 = rect2.top + rect2.height / 2;

  const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
  line.setAttribute("x1", x1);
  line.setAttribute("y1", y1);
  line.setAttribute("x2", x2);
  line.setAttribute("y2", y2);

  const color = direction === "Âæå" ? "#93d8ce" : "#d66b00";
  line.setAttribute("stroke", color);
  line.setAttribute("stroke-width", "9");
  line.setAttribute("stroke-linecap", "round");

  svg.appendChild(line);
}

function addLog(text) {
  const logPanel = document.getElementById("logPanel");
  const p = document.createElement("p");
  p.textContent = text;
  logPanel.appendChild(p);
  logPanel.scrollTop = logPanel.scrollHeight;
}

function checkStitchCompletion() {
  if (stitchHistory.length === currentStitchMode.goalCount) {
    document.getElementById("successText").textContent =
	`üéâ ‰ªªÂãôÂÆåÊàêÔºÅ‰Ω†ÊàêÂäüÂÆåÊàê„Äå${currentStitchMode.name}„ÄçÔºÅ`;
	document.getElementById("successMessage").style.display = "block";
    msg.style.display = "block";
  }
}

// === Ë¶èÂâáÂáΩÂºè ===

function validateRunningStitch(nextPos) {
  if (stitchHistory.length === 0) return true;
  const lastPos = stitchHistory.at(-1);
  const sameRow = lastPos[0] === nextPos[0];
  const lastIndex = parseInt(lastPos.slice(1));
  const nextIndex = parseInt(nextPos.slice(1));
  return sameRow && nextIndex === lastIndex + 1;
}

function validateBackStitch(nextPos) {
  const len = stitchHistory.length;
  if (len === 0) return true; // Á¨¨‰∏ÄÈáù‰ªªÊÑè
  const baseRow = stitchHistory[0][0];
  const nextRow = nextPos[0];
  const nextIndex = parseInt(nextPos.slice(1));

  if (nextRow !== baseRow) return false;

  const lastIndex = parseInt(stitchHistory[len - 1].slice(1));

  if (len === 1) {
    // Á¨¨‰∫åÈáùÔºöÂøÖÈ†àÊòØËµ∑Èªû +1
    const startIndex = parseInt(stitchHistory[0].slice(1));
    return nextIndex === startIndex + 1;
  }

  if (len === 9) {
    // Á¨¨ÂçÅÈáùÔºàÊúÄÂæå‰∏ÄÈáùÔºâÔºö+1 Êî∂Â∞æ
    return nextIndex === lastIndex + 1;
  }

  if (len % 2 === 0) {
    // Á¨¨ 2,4,6,8 ‚Üí ÂõûÈÄÄ‰∏ÄÊ†º
    return nextIndex === lastIndex - 1;
  } else {
    // Á¨¨ 3,5,7 ‚Üí ÂâçÈÄ≤ÂÖ©Ê†º
    return nextIndex === lastIndex + 2;
  }
}

function validateHiddenStitch(nextPos) {
  const len = stitchHistory.length;
  if (len === 0) return true;

  const nextRow = nextPos[0];
  const nextIndex = parseInt(nextPos.slice(1));

  const lastPos = stitchHistory[len - 1];
  const lastRow = lastPos[0];
  const lastIndex = parseInt(lastPos.slice(1));

  if (len === 1) {
    // Á¨¨ 1 ‚Üí Á¨¨ 2 ÈáùÔºöÂøÖÈ†àÊèõÊéíÔºåindex Áõ∏Âêå
    return nextRow !== lastRow && nextIndex === lastIndex;
  }

  if (len % 2 === 0) {
    // Á¨¨ 2, 4, 6, 8ÔºöÂêåÊéíÔºåindex +1
    return nextRow === lastRow && nextIndex === lastIndex + 1;
  } else {
    // Á¨¨ 3, 5, 7, 9ÔºöÊèõÊéíÔºåindex Áõ∏Âêå
    return nextRow !== lastRow && nextIndex === lastIndex;
  }
}

function restartStitch() {
  // Ê∏ÖÈô§Á∑öÊ¢ù
  const svg = document.getElementById("stitchCanvas");
  svg.innerHTML = "";

  // Ê∏ÖÈô§Á¥ÄÈåÑËàáÊ®£Âºè
  stitchHistory = [];
  currentHole = null;
  currentDirection = null;

  document.querySelectorAll('.hole').forEach(h => h.classList.remove('selected'));
  document.getElementById("logPanel").innerHTML = "";
  document.getElementById("successMessage").style.display = "none";
}

function finishStitch() {
  window.location.href = "stitch-select.html";
}